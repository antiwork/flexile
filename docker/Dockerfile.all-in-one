# syntax=docker/dockerfile:1.4
# All-in-One Flexile Container - All services in a single container
# Ideal for demos, testing, and single-developer setups

FROM ubuntu:22.04

# Build arguments
ARG RUBY_VERSION=3.4.3
ARG NODE_VERSION=22
ARG POSTGRES_VERSION=15
ARG REDIS_VERSION=7
ARG MINIO_VERSION=RELEASE.2024-01-01T16-36-33Z

# Environment setup
ENV DEBIAN_FRONTEND=noninteractive \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    TZ=UTC \
    # Ruby environment
    RUBY_VERSION=${RUBY_VERSION} \
    GEM_HOME=/usr/local/bundle \
    BUNDLE_PATH=/usr/local/bundle \
    BUNDLE_BIN=/usr/local/bundle/bin \
    PATH=/usr/local/bundle/bin:$PATH \
    # Node environment
    NODE_VERSION=${NODE_VERSION} \
    NODE_ENV=development \
    # Rails environment
    RAILS_ENV=development \
    RAILS_LOG_TO_STDOUT=true \
    # PostgreSQL environment
    PGDATA=/var/lib/postgresql/data \
    POSTGRES_USER=username \
    POSTGRES_PASSWORD=password \
    POSTGRES_DB=flexile_development \
    # Redis environment
    REDIS_PORT=6379 \
    # MinIO environment
    MINIO_ROOT_USER=minioadmin \
    MINIO_ROOT_PASSWORD=minioadmin123 \
    MINIO_REGION_NAME=us-east-1 \
    # Application environment
    DATABASE_URL=postgresql://username:password@localhost:5432/flexile_development \
    REDIS_URL=redis://localhost:6379/0 \
    SIDEKIQ_REDIS_URL=redis://localhost:6379/1 \
    AWS_ENDPOINT_URL=http://localhost:9000 \
    AWS_ACCESS_KEY_ID=minioadmin \
    AWS_SECRET_ACCESS_KEY=minioadmin123 \
    AWS_REGION=us-east-1 \
    S3_PRIVATE_BUCKET=flexile-development-private \
    S3_PUBLIC_BUCKET=flexile-development-public

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Build essentials
    build-essential \
    curl \
    wget \
    git \
    ca-certificates \
    gnupg \
    lsb-release \
    software-properties-common \
    # Ruby dependencies
    libssl-dev \
    libreadline-dev \
    zlib1g-dev \
    libyaml-dev \
    libxml2-dev \
    libxslt1-dev \
    libcurl4-openssl-dev \
    libffi-dev \
    # PostgreSQL client libraries
    libpq-dev \
    # Image processing
    imagemagick \
    libvips-dev \
    # Process management
    supervisor \
    # Network tools
    netcat \
    dnsutils \
    # Editor (for debugging)
    vim \
    && rm -rf /var/lib/apt/lists/*

# Install PostgreSQL
RUN sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list' && \
    wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - && \
    apt-get update && \
    apt-get install -y postgresql-${POSTGRES_VERSION} postgresql-client-${POSTGRES_VERSION} postgresql-contrib-${POSTGRES_VERSION} && \
    rm -rf /var/lib/apt/lists/*

# Install Redis
RUN add-apt-repository ppa:redislabs/redis && \
    apt-get update && \
    apt-get install -y redis-server && \
    rm -rf /var/lib/apt/lists/*

# Install Nginx
RUN apt-get update && \
    apt-get install -y nginx && \
    rm -rf /var/lib/apt/lists/*

# Install Ruby using rbenv
RUN git clone https://github.com/rbenv/rbenv.git /root/.rbenv && \
    echo 'export PATH="/root/.rbenv/bin:$PATH"' >> /root/.bashrc && \
    echo 'eval "$(rbenv init -)"' >> /root/.bashrc && \
    git clone https://github.com/rbenv/ruby-build.git /root/.rbenv/plugins/ruby-build && \
    /root/.rbenv/bin/rbenv install ${RUBY_VERSION} && \
    /root/.rbenv/bin/rbenv global ${RUBY_VERSION} && \
    /root/.rbenv/shims/gem install bundler foreman && \
    ln -s /root/.rbenv/shims/ruby /usr/local/bin/ruby && \
    ln -s /root/.rbenv/shims/gem /usr/local/bin/gem && \
    ln -s /root/.rbenv/shims/bundle /usr/local/bin/bundle && \
    ln -s /root/.rbenv/shims/bundler /usr/local/bin/bundler && \
    ln -s /root/.rbenv/shims/rails /usr/local/bin/rails && \
    ln -s /root/.rbenv/shims/rake /usr/local/bin/rake

# Install Node.js and pnpm
RUN curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION}.x | bash - && \
    apt-get install -y nodejs && \
    npm install -g pnpm@latest && \
    rm -rf /var/lib/apt/lists/*

# Install MinIO
RUN wget https://dl.min.io/server/minio/release/linux-amd64/archive/minio.${MINIO_VERSION} -O /usr/local/bin/minio && \
    chmod +x /usr/local/bin/minio && \
    wget https://dl.min.io/client/mc/release/linux-amd64/mc -O /usr/local/bin/mc && \
    chmod +x /usr/local/bin/mc

# Create application directories
RUN mkdir -p /app/backend /app/frontend /app/certificates /app/docker \
    /var/log/supervisor \
    /var/lib/postgresql/data \
    /var/lib/redis \
    /var/lib/minio \
    /run/postgresql \
    /etc/nginx/sites-enabled

# Copy application code
COPY backend /app/backend
COPY frontend /app/frontend
COPY docker /app/docker
COPY Procfile.dev /app/
COPY .env* /app/

# Set working directory
WORKDIR /app

# Install Ruby dependencies
RUN cd /app/backend && \
    bundle config set --local deployment 'false' && \
    bundle config set --local without 'production' && \
    bundle config set --local path 'vendor/bundle' && \
    bundle install --jobs 4 --retry 3 && \
    bundle config unset --local path

# Install Node dependencies
RUN cd /app/frontend && \
    pnpm install --frozen-lockfile

# Copy configuration files
COPY docker/all-in-one/supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY docker/all-in-one/nginx.conf /etc/nginx/nginx.conf
COPY docker/flexile_dev.conf /etc/nginx/sites-available/default
COPY docker/all-in-one/init.sh /usr/local/bin/init.sh
COPY docker/all-in-one/health-check.sh /usr/local/bin/health-check.sh

# Make scripts executable
RUN chmod +x /usr/local/bin/init.sh /usr/local/bin/health-check.sh

# Configure PostgreSQL
USER postgres
RUN /etc/init.d/postgresql start && \
    psql --command "CREATE USER username WITH SUPERUSER PASSWORD 'password';" && \
    createdb -O username flexile_development && \
    createdb -O username flexile_test && \
    /etc/init.d/postgresql stop

USER root

# Configure Redis
RUN sed -i 's/^bind .*/bind 127.0.0.1/' /etc/redis/redis.conf && \
    sed -i 's/^protected-mode yes/protected-mode no/' /etc/redis/redis.conf && \
    sed -i 's/^# requirepass .*/requirepass ""/' /etc/redis/redis.conf

# Configure Nginx
RUN rm -f /etc/nginx/sites-enabled/default && \
    ln -s /etc/nginx/sites-available/default /etc/nginx/sites-enabled/default

# Expose ports
EXPOSE 80 443 3000 3001 5432 6379 9000 9001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD /usr/local/bin/health-check.sh || exit 1

# Start supervisor
CMD ["/usr/local/bin/init.sh"]