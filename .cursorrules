- Always use the latest version of TypeScript, React, and Next.js
- Sentence case headers and buttons and stuff, not title case
- Always write ALL of the code
- Don't apologize for errors, fix them
- Newlines at end of files, always

- To add a feature:
  - Add page to `frontend/app/**/page.tsx`
  - Add any components to `frontend/components/**/*.tsx`
  - Add tRPC API routes to `frontend/trpc/routes/**/index.ts` and then add those to `frontend/trpc/server.ts`
  - Create API handlers using tRPC API routes that follow REST principles
  - Forms for adding new objects to the database should inherit values from the last object added to the table (e.g., contractor forms should default to the last contractor's values like contractSignedElsewhere, payRateInSubunits, role, etc.)

- For writing end-to-end tests:
  - Use Playwright tests in `e2e/**/*.spec.ts`
  - If migrating from rspec, delete the rspec tests
  - Factories can be created using the rspec factories in `spec/factories` in the `/e2e/factories` folder
  - For any broken locators / assertions, you can use the playwright extension to record tests or pick locators

- For writing front-end code:
  - Do not use `React.FC`. Use the following syntax: `const Component = ({ prop1, prop2 }: { prop1: string; prop2: number }) => { ... }`

- After any functional code change:
  - For Ruby/Rails changes:
    - Add or update unit tests in `backend/spec/models/` for model changes
    - Add or update controller tests in `backend/spec/controllers/` for controller changes
    - Add or update system tests in `backend/spec/system/` for UI flow changes
    - Run tests with `bundle exec rspec <path_to_spec>` to verify
  - For TypeScript/Next.js changes:
    - Add or update unit tests for front-end business logic
    - Add or update e2e tests in `e2e/tests/` that cover the changed functionality
    - Follow the existing test patterns in similar files
    - Run tests with `pnpm playwright test <path_to_spec>` to verify e2e tests
  - Tests should cover:
    - Happy path (expected behavior)
    - Edge cases and error handling
    - Any regressions that might be introduced

- Tech debt:
  - Add a `TODO (techdebt)` comment to document refactors that should be made in the future

- No explanatory comments please

- When building UI, use existing components from `frontend/components/` when available:

## UI Components (Shadcn/UI primitives)
- `Button` - Primary action buttons with variants (default, primary, critical, success, outline, ghost, link)
- `Input` - Standard text input with prefix/suffix support
- `Textarea` - Multi-line text input with auto-sizing
- `Checkbox` - Checkbox input with indeterminate state support
- `Switch` - Toggle switch component
- `Badge` - Small status/category indicators
- `Card` - Container component with header, content, footer sections
- `Dialog` - Modal dialogs and overlays
- `Popover` - Floating content containers
- `DropdownMenu` - Context menus and action menus
- `Alert` - Status messages and notifications
- `Progress` - Progress bars and loading indicators
- `Skeleton` - Loading placeholders
- `Separator` - Visual dividers
- `Avatar` - User profile images with fallbacks
- `Calendar` - Date picker calendar component
- `Command` - Command palette and search interfaces
- `Table` - Basic table structure (use DataTable for advanced features)
- `Form`, `FormField`, `FormItem`, `FormLabel`, `FormControl`, `FormMessage` - Form building blocks with validation

## Custom Form Components
- `ComboBox` - Searchable dropdown with single/multiple selection
- `NumberInput` - Numeric input with decimal support and formatting
- `DatePicker` - Date selection with calendar popup
- `RangeInput` - Range/slider input component
- `RadioButtons` - Radio button groups
- `ColorPicker` - Color selection component

## Data Display Components
- `DataTable` - Feature-rich table with sorting, filtering, pagination, row selection, and context menus
- `Placeholder` - Empty state component with optional icon and content
- `Status` - Status indicators with color coding
- `Delta` - Value change indicators (up/down arrows with colors)
- `CircularProgress` - Circular progress indicators

## Action Components
- `MutationButton` - Button that shows loading/success/error states for mutations
- `CopyButton` - Button that copies content to clipboard
- `Link` - Enhanced link component with proper styling

## Layout Components
- `DashboardHeader` - Standard page header for dashboard pages
- `Tabs` - Tab navigation component
- `Sidebar` - Navigation sidebar with collapsible sections
- `Breadcrumb` - Navigation breadcrumbs

## Specialized Components
- `RichText` - Rich text editor component
- `GettingStarted` - Onboarding/getting started flows
- `TableSkeleton` - Loading skeleton specifically for tables
- `SkeletonList` - Loading skeleton for lists

## Context Menu Actions
- `ContextMenuActions` - Reusable context menu actions
- `SelectionActions` - Bulk action components for selected items

- Database schema synchronization:
  - Any changes to the database schema via Rails migrations in `backend/db/migrate/` must be reflected in `frontend/db/schema.ts`
  - The frontend schema file should be updated to match the Rails schema structure for type safety
