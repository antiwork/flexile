#!/usr/bin/env bash
# dev-docker - Docker development environment management script
# Provides easy commands to manage the Flexile Docker development environment

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
DOCKER_DIR="$PROJECT_ROOT/docker"
COMPOSE_FILE="$PROJECT_ROOT/docker-compose.dev.yml"
DOCKER_COMPOSE=""  # Will be set by check_docker function

# Load environment variables
if [ -f "$DOCKER_DIR/.env.docker" ]; then
    source "$DOCKER_DIR/.env.docker"
fi

# Function to print colored output
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to check Docker installation
check_docker() {
    if ! command -v docker &> /dev/null; then
        print_message "$RED" "❌ Docker is not installed. Please install Docker Desktop first."
        exit 1
    fi
    
    if ! docker info &> /dev/null; then
        print_message "$RED" "❌ Docker daemon is not running. Please start Docker Desktop."
        exit 1
    fi
    
    # Check for Docker Compose (try both new and old command formats)
    if docker compose version &> /dev/null; then
        DOCKER_COMPOSE="docker compose"
    elif docker-compose version &> /dev/null; then
        DOCKER_COMPOSE="docker-compose"
    else
        print_message "$RED" "❌ Docker Compose is not available. Please install Docker Compose."
        exit 1
    fi
}

# Function to configure environment
configure_environment() {
    local domain=${1:-${FLEXILE_DOMAIN:-flexile.dev}}
    
    print_message "$BLUE" "🔧 Configuring environment for domain: $domain"
    
    # Run configuration script
    "$DOCKER_DIR/scripts/configure-environment.sh" --domain "$domain"
}

# Function to generate certificates
generate_certificates() {
    local domain=${1:-${FLEXILE_DOMAIN:-flexile.dev}}
    
    print_message "$BLUE" "🔐 Generating SSL certificates..."
    "$DOCKER_DIR/scripts/generate-certificates.sh" "$domain"
}

# Function to setup MinIO buckets
setup_minio() {
    print_message "$BLUE" "🪣 Setting up MinIO buckets..."
    
    # Wait for MinIO to be healthy using minio-client sidecar
    local max_attempts=30
    local attempt=1
    local backoff=2
    
    while [ $attempt -le $max_attempts ]; do
        if $DOCKER_COMPOSE -f "$COMPOSE_FILE" exec minio-client mc ready local &>/dev/null; then
            print_message "$GREEN" "  MinIO is ready!"
            break
        fi
        print_message "$YELLOW" "  Waiting for MinIO to be ready... ($attempt/$max_attempts)"
        sleep $backoff
        # Exponential backoff with max 10 seconds
        backoff=$((backoff < 10 ? backoff * 2 : 10))
        ((attempt++))
    done
    
    if [ $attempt -gt $max_attempts ]; then
        print_message "$RED" "❌ MinIO failed to become ready after $max_attempts attempts"
        exit 1
    fi
    
    # Set up MinIO alias and create buckets using minio-client sidecar
    if ! $DOCKER_COMPOSE -f "$COMPOSE_FILE" exec minio-client mc alias set local http://minio:9000 minioadmin minioadmin123; then
        print_message "$RED" "❌ Failed to set MinIO alias"
        exit 1
    fi
    
    # Create buckets
    if ! $DOCKER_COMPOSE -f "$COMPOSE_FILE" exec minio-client sh -c "
        mc mb --ignore-existing local/flexile-development-private &&
        mc mb --ignore-existing local/flexile-development-public &&
        mc anonymous set public local/flexile-development-public
    "; then
        print_message "$RED" "❌ Failed to create MinIO buckets"
        exit 1
    fi
    
    print_message "$GREEN" "✅ MinIO buckets configured"
}

# Function to start services
start_services() {
    print_message "$GREEN" "🚀 Starting Flexile Docker development environment..."
    
    # Build and start services
    $DOCKER_COMPOSE -f "$COMPOSE_FILE" up -d --build
    
    # Setup MinIO if needed
    setup_minio
    
    print_message "$GREEN" "✅ Development environment started successfully!"
    print_message "$YELLOW" ""
    print_message "$YELLOW" "📌 Services available at:"
    print_message "$YELLOW" "   Main App: https://${FLEXILE_DOMAIN:-flexile.dev}"
    print_message "$YELLOW" "   API: https://api.${FLEXILE_DOMAIN:-flexile.dev}"
    print_message "$YELLOW" "   MinIO: https://minio.${FLEXILE_DOMAIN:-flexile.dev}"
    print_message "$YELLOW" "   MinIO Console: https://minio-console.${FLEXILE_DOMAIN:-flexile.dev}"
    print_message "$YELLOW" ""
    print_message "$YELLOW" "   Direct ports:"
    print_message "$YELLOW" "   Rails: http://localhost:3000"
    print_message "$YELLOW" "   Next.js: http://localhost:3001"
    print_message "$YELLOW" "   PostgreSQL: localhost:5432"
    print_message "$YELLOW" "   Redis: localhost:6389"
}

# Function to stop services
stop_services() {
    print_message "$YELLOW" "🛑 Stopping services..."
    $DOCKER_COMPOSE -f "$COMPOSE_FILE" down
    print_message "$GREEN" "✅ Services stopped"
}

# Function to show logs
show_logs() {
    local service=$1
    if [ -z "$service" ]; then
        $DOCKER_COMPOSE -f "$COMPOSE_FILE" logs -f
    else
        $DOCKER_COMPOSE -f "$COMPOSE_FILE" logs -f "$service"
    fi
}

# Function to execute command in container
exec_command() {
    local service=$1
    shift
    $DOCKER_COMPOSE -f "$COMPOSE_FILE" exec "$service" "$@"
}

# Function to run Rails console
rails_console() {
    print_message "$BLUE" "📟 Opening Rails console..."
    exec_command backend bundle exec rails console
}

# Function to run database migrations
run_migrations() {
    print_message "$BLUE" "🗄️ Running database migrations..."
    exec_command backend bundle exec rails db:migrate
    print_message "$GREEN" "✅ Migrations completed"
}

# Function to reset the environment
reset_environment() {
    print_message "$YELLOW" "⚠️  This will delete all Docker volumes and reset the environment!"
    read -p "Are you sure? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_message "$YELLOW" "🔄 Resetting environment..."
        $DOCKER_COMPOSE -f "$COMPOSE_FILE" down -v
        print_message "$GREEN" "✅ Environment reset complete"
    else
        print_message "$BLUE" "ℹ️  Reset cancelled"
    fi
}

# Function to show status
show_status() {
    print_message "$BLUE" "📊 Service Status:"
    $DOCKER_COMPOSE -f "$COMPOSE_FILE" ps
}

# Function to rebuild services
rebuild_services() {
    local service=$1
    if [ -z "$service" ]; then
        print_message "$BLUE" "🔨 Rebuilding all services..."
        $DOCKER_COMPOSE -f "$COMPOSE_FILE" build --no-cache
    else
        print_message "$BLUE" "🔨 Rebuilding $service..."
        $DOCKER_COMPOSE -f "$COMPOSE_FILE" build --no-cache "$service"
    fi
    print_message "$GREEN" "✅ Rebuild complete"
}

# Main script logic
main() {
    check_docker
    
    case "${1:-}" in
        start|up)
            configure_environment "${2:-}"
            generate_certificates "${2:-}"
            start_services
            ;;
        stop|down)
            stop_services
            ;;
        restart)
            stop_services
            start_services
            ;;
        logs)
            show_logs "${2:-}"
            ;;
        exec)
            shift
            exec_command "$@"
            ;;
        console)
            rails_console
            ;;
        migrate)
            run_migrations
            ;;
        reset)
            reset_environment
            ;;
        status|ps)
            show_status
            ;;
        rebuild)
            rebuild_services "${2:-}"
            ;;
        configure)
            configure_environment "${2:-}"
            ;;
        setup)
            configure_environment "${2:-}"
            generate_certificates "${2:-}"
            print_message "$GREEN" "✅ Setup complete. Run '$0 start' to launch the environment."
            ;;
        help|--help|-h)
            echo "Usage: $0 [command] [options]"
            echo ""
            echo "Commands:"
            echo "  start, up [domain]     Start development environment"
            echo "  stop, down            Stop development environment"
            echo "  restart               Restart all services"
            echo "  logs [service]        Show logs (all services or specific)"
            echo "  exec <service> <cmd>  Execute command in service container"
            echo "  console               Open Rails console"
            echo "  migrate               Run database migrations"
            echo "  reset                 Reset environment (delete volumes)"
            echo "  status, ps            Show service status"
            echo "  rebuild [service]     Rebuild service images"
            echo "  configure [domain]    Configure environment for domain"
            echo "  setup [domain]        Initial setup (configure + certificates)"
            echo "  help                  Show this help message"
            echo ""
            echo "Services:"
            echo "  backend, frontend, db, redis, minio, nginx, sidekiq"
            echo ""
            echo "Examples:"
            echo "  $0 start              # Start with default domain (flexile.dev)"
            echo "  $0 start myapp.local  # Start with custom domain"
            echo "  $0 logs backend       # Show backend logs"
            echo "  $0 exec backend bash  # Open bash in backend container"
            ;;
        *)
            print_message "$YELLOW" "Unknown command: ${1:-}"
            echo "Run '$0 help' for usage information"
            exit 1
            ;;
    esac
}

# Run main function
main "$@"