diff --git a/dist/experimental/testmode/fetch.js b/dist/experimental/testmode/fetch.js
index cae9ec8cd4e4e266df599ea6a6d3a16af8ac6feb..2e74e45e848c2a7a7c1661a2e06e1d734cd34414 100644
--- a/dist/experimental/testmode/fetch.js
+++ b/dist/experimental/testmode/fetch.js
@@ -65,7 +65,7 @@ async function buildProxyRequest(testData, request) {
                     getTestStack()
                 ]
             ],
-            body: body ? Buffer.from(await request.arrayBuffer()).toString('base64') : null,
+            body: body ? Buffer.from(await request.clone().arrayBuffer()).toString('base64') : null,
             cache,
             credentials,
             integrity,
@@ -83,8 +83,9 @@ function buildResponse(proxyResponse) {
         headers: new Headers(headers)
     });
 }
+let testInfo;
 async function handleFetch(originalFetch, request) {
-    const testInfo = (0, _context.getTestReqInfo)(request, reader);
+    testInfo ||= (0, _context.getTestReqInfo)(request, reader);
     if (!testInfo) {
         // Passthrough non-test requests.
         return originalFetch(request);
@@ -98,21 +99,19 @@ async function handleFetch(originalFetch, request) {
             // @ts-ignore
             internal: true
         }
-    });
+    }).catch(() => ({ ok: false }));
     if (!resp.ok) {
-        throw Object.defineProperty(new Error(`Proxy request failed: ${resp.status}`), "__NEXT_ERROR_CODE", {
-            value: "E146",
-            enumerable: false,
-            configurable: true
-        });
+        testInfo = null;
+        return originalFetch(request);
     }
     const proxyResponse = await resp.json();
     const { api } = proxyResponse;
     switch(api){
+        case 'unhandled':
+            testInfo = null;
         case 'continue':
             return originalFetch(request);
         case 'abort':
-        case 'unhandled':
             throw Object.defineProperty(new Error(`Proxy request aborted [${request.method} ${request.url}]`), "__NEXT_ERROR_CODE", {
                 value: "E145",
                 enumerable: false,
diff --git a/dist/experimental/testmode/playwright/next-fixture.js b/dist/experimental/testmode/playwright/next-fixture.js
index e6e42b96dbe6621eb4990923e770382441c55667..cecba31bab2432505f86dab61e9a2a8ad7ee5e65 100644
--- a/dist/experimental/testmode/playwright/next-fixture.js
+++ b/dist/experimental/testmode/playwright/next-fixture.js
@@ -44,6 +44,7 @@ class NextFixtureImpl {
             if (this.options.fetchLoopback) {
                 return fetch(req.clone());
             }
+            if (this.fetchHandlers.length) return "continue";
             return undefined;
         });
     }
diff --git a/dist/experimental/testmode/playwright/step.js b/dist/experimental/testmode/playwright/step.js
index 3eb6f598ab095f1aebea73e4c92af55e7db98c97..7117074dec201a260a081b9d34b0f274773184b8 100644
--- a/dist/experimental/testmode/playwright/step.js
+++ b/dist/experimental/testmode/playwright/step.js
@@ -13,10 +13,6 @@ function isWithRunAsStep(testInfo) {
     return '_runAsStep' in testInfo;
 }
 async function step(testInfo, props, handler) {
-    if (isWithRunAsStep(testInfo)) {
-        return testInfo._runAsStep(props, ({ complete })=>handler(complete));
-    }
-    // Fallback to the `test.step()`.
     let result;
     let reportedError;
     try {
diff --git a/image-types/global.d.ts b/image-types/global.d.ts
index 661c316e89b3c1aa5913b8afebdbf3e6299eccd7..290d6b3774ac9cb71bf6ba5f458e8054de901669 100644
--- a/image-types/global.d.ts
+++ b/image-types/global.d.ts
@@ -13,7 +13,7 @@ declare module '*.svg' {
    * `@svgr/webpack` plugin or
    * `babel-plugin-inline-react-svg` plugin.
    */
-  const content: any
+  const content: import('../dist/shared/lib/image-external').StaticImageData
 
   export default content
 }
